---
layout: post
title:  "Ionic3 (3) 입력 form"
date:   2018-10-05
description: Ionic3 form 입력과 유효성 검사에 대해 알아본다.
---
#### 1.Ionic input 컴포넌트
앞 글에서 Ionic에서 많은 UI컴포넌트를 지원한다고 소개하였다.\\
[Input 컴포넌트] [InputComponetLink]를 먼저 살펴보는걸 추천!

#### 2. Input View 생성
앞 글에서 blank 프로젝트를 생성했다면 다음과 같은 구조의 프로젝트가 생성되었을 것이다.
<figure>
	<img src="{{ '/assets/img/post/20181002_img1.png' | prepend: site.baseurl }}" alt="프로젝트 구조"> 
	<figcaption>프로젝트 구조</figcaption>
</figure>

이 글에도 네모칸에 있는 파일만 보도록하자!

* home.ts 파일을 열어 Input 변수값을 담을 변수와 addItem이라는 함수를 추가하였다.
{% highlight javascript %}
import { Component } from '@angular/core';
import { NavController } from 'ionic-angular';

@Component({
  selector: 'page-home',
  templateUrl: 'home.html'
})
export class HomePage {

  items: string[] = ['1','2','3'];
  newItem:string; //입력값을 저장할 변수
  constructor(public navCtrl: NavController) {}
  
  //리스트의 마지막에 Input 값을 추가
  addItem(){
    this.items.push(this.newItem);
    this.newItem = '';
  }
}
{% endhighlight %}

* 다음으로 home.html 파일을 열어 input View를 추가해보자 
{% highlight html %}
<ion-content>
 <!-- 입력란을 추가한다.-->
 <ion-list>
    <ion-item>
      <ion-label fixed>item name</ion-label>
      <ion-input [(ngModel)]="newItem" type="text"></ion-input>
    </ion-item>
  </ion-list>

  <button ion-button full (click)="addItem()">add item</button>
  <hr>
  <!-- END 입력란을 추가한다.-->
  <ion-list>
    <button ion-item *ngFor="let item of items">
      { { item } }
    </button>
  </ion-list>
</ion-content>
{% endhighlight %}

<figure>
	<img src="{{ '/assets/img/post/20181005_img1.png' | prepend: site.baseurl }}" alt="Input 예시 화"> 
	<figcaption>Input 값이 리스트 마지막에 추가되었다.</figcaption>
</figure>

* ionic serve 명령어를 실행 후 Input값 입력후 'add item' 버튼을 클릭해보자.\\
리스트의 마지막에 입력값이 추가되었는가?\\
성공했다 입력값 유효성 검사를 추가해보록하자.

#### 3. Input 유효성 검사
AngulrJS에서 form 유효성 검사를 쉽게 해줄수 있는 기능을 지원한다.\\
자세한 예시는 [여기][FormCheckLink]에서 확인가능하다.\\
이 글에서는 최대한 간단하게 구현해보도록한다.
{% highlight javascript %}

import { Component } from '@angular/core';
import {AlertController, NavController} from 'ionic-angular';
// AlertController 를 import 한다.

@Component({
  selector: 'page-home',
  templateUrl: 'home.html'
})
export class HomePage {

  items: string[] = ['1','2','3'];

  newItem:string;

  constructor(public navCtrl: NavController
             ,public alertCtrl: AlertController) //생성자에 AlertController를 추가한다.
  {}
  //리스트의 마지막에 새로운 행 추가
  addItem(){
    if( this.checkInput() ) {
      //입력값이 빈값일 경우 alet창 출력
      this.alertCtrl.create({
        title: 'Alert',
        subTitle: 'item name is empty',
        buttons:['확인']
      }).present();
    } else {
      this.items.push(this.newItem);
    }
    this.newItem = '';
  }

  //입력값이 유효한지 검사
  checkInput() : boolean{
    return this.newItem === undefined || this.newItem.trim().length == 0;
  }
}
{% endhighlight %}

* 실행 결과를 확인해보자, item name 입력창이 빈값인 상태에서 add item 버튼을 클릭하였을때 경고창이 출력되면 성공이다.

<figure>
	<img src="{{ '/assets/img/post/20181005_img2.png' | prepend: site.baseurl }}" alt="Input 예시 화"> 
	<figcaption>Input 값이 빈값이면 alert창이 출력된다.</figcaption>
</figure>

> ###### 다음은 HTTP 요청 기능을 테스트할 NodeJS서버를 만들어 보도록하자.


* Ionic 맛보기 링크
1. [Ionic 개발 환경 구축] [개발환경구축]
2. [Ionic 리스트 뷰] [리스트뷰]
3. [Ionic 입력 폼] [입력폼]
4. [NodeJS Web Server (간단한 JSON값 주고 받는)] [WebServer]
5. [Ionic HTTP요청 기능] [HTTP요청기능]
6. [Ionic 로컬 저장소 기능] [로컬저장소기능]

[개발환경구축]: https://parkjungwoong.github.io/blog/Ionic3-%EA%B0%9C%EB%B0%9C-%ED%99%98%EA%B2%BD-%EC%84%A4%EC%A0%95/
[리스트뷰]: https://parkjungwoong.github.io/blog/Ionic3-%EB%A6%AC%EC%8A%A4%ED%8A%B8-%EB%B7%B0/
[입력폼]: https://parkjungwoong.github.io/blog/Ionic3-form-%EC%9E%85%EB%A0%A5/
[WebServer]: https://parkjungwoong.github.io/blog/Ionic3-%ED%85%8C%EC%8A%A4%ED%8A%B8%EC%9A%A9-NodeJS-%EC%9B%B9%EC%84%9C%EB%B2%84/
[HTTP요청기능]: https://parkjungwoong.github.io/blog/Ionic3-HTTP%EC%9A%94%EC%B2%AD-%EB%B3%B4%EB%82%B4%EA%B8%B0/
[로컬저장소기능]: https://parkjungwoong.github.io/blog/Ionic3-%EB%A1%9C%EC%BB%AC%EC%A0%80%EC%9E%A5%EC%86%8C/


[InputComponetLink]: https://ionicframework.com/docs/components/#inputs
[FormCheckLink]: https://www.joshmorony.com/advanced-forms-validation-in-ionic-2/







